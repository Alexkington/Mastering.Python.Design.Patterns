第一章 工厂模式
============
   创造模式处理一个对象的创建。创造模式的目的是为了在不按照约定而直接地创建的地方提供可选择的情况。  
   
  在工厂模式中，客户端查询一个对象而不知道这个对象来自哪里（即，哪一个类被用来生成它）。在一个工厂背后的思想是简化一个对象的创建。如果这个结果是通过一个中心函数来完成，相比之下要让一个客户端直接地使用类实例化来创建对象，跟踪哪一个对象被创建则会更容易些。通过分离要使用的代码，工厂减少了一个应用维护的复杂性。
    
工厂通常以两张形式出现：**工厂模式**，是一个每次输入参数都返回一个不同的方法（在Python术语中称为函数）；抽象工厂，它是一组工厂方法用于创建相关产品的系列。  

工厂方法
--------------
********
在工厂方法中，我们执行一个单独的函数，传递一个参数，它提供了我们想要的是*什么* 信息。我们不要求知道任何关于这个对象的*如何*实现的细节，以及它来自*哪里*。

### 一个真实的例子
一个工厂方法模式现实中的使用是在塑料玩具厂。
                       

抽象工厂
------------
******
抽象工厂设计模式是工厂模式的归纳。基本上，抽象工厂是一组(逻辑上的)工厂方法，这里每个工厂模式都负责生成一种不同的对象。

###一个真实的例子
抽象工厂用在车辆织造中。相同的机械装置用来冲压不同的车辆模型的部件（门，面板，车身罩体，挡泥板，以及各种镜子）。聚合了不同机械装置的模型是可配置的，而且在任何时候都可以轻松变更。在下图中我们可以看到一个车辆制造的抽象工厂的例子。   

###一个软件例子
**django_factory** 包是一个为了在测试中创建Django模型的抽象工厂实现。它用来创建支持指定测试属性的模型实例。这是很重要的因为测试变得可读，以及避免共享不必要的代码。
   
##使用案例
因为抽象工模式是工厂方法模式的归纳，它具有同样的优点：使得追踪一个对象创建更容易，它让对象的使用和创建分离开，并且给我们内存使用以及应用的性能提高的可能。   
  
但是问题来了：我们如何知道什么时候使用工厂模式还是抽象工厂？答案是我们通常以更简单的工厂模式。
  
